[{"C:\\Users\\Le Anh Ngoc\\Desktop\\learning\\ChartJsDemo\\src\\index.js":"1","C:\\Users\\Le Anh Ngoc\\Desktop\\learning\\ChartJsDemo\\src\\App.js":"2","C:\\Users\\Le Anh Ngoc\\Desktop\\learning\\ChartJsDemo\\src\\components\\chart\\bar-char\\BarChar.js":"3","C:\\Users\\Le Anh Ngoc\\Desktop\\learning\\ChartJsDemo\\src\\util\\common-function.js":"4","C:\\Users\\Le Anh Ngoc\\Desktop\\learning\\ChartJsDemo\\src\\components\\antdComps\\select.jsx":"5","C:\\Users\\Le Anh Ngoc\\Desktop\\learning\\ChartJsDemo\\src\\components\\chart\\Line\\LegendCustom.js":"6"},{"size":169,"mtime":1668993525128,"results":"7","hashOfConfig":"8"},{"size":4156,"mtime":1670976797922,"results":"9","hashOfConfig":"8"},{"size":3113,"mtime":1666110264116,"results":"10","hashOfConfig":"8"},{"size":5985,"mtime":1670978543039,"results":"11","hashOfConfig":"8"},{"size":248,"mtime":1668993776135,"results":"12","hashOfConfig":"8"},{"size":1538,"mtime":1671034688965,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"18dbbxi",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Le Anh Ngoc\\Desktop\\learning\\ChartJsDemo\\src\\index.js",[],["30","31"],"C:\\Users\\Le Anh Ngoc\\Desktop\\learning\\ChartJsDemo\\src\\App.js",["32","33"],"import {\n  CategoryScale,\n  Chart as ChartJS,\n  Filler,\n  Legend,\n  LinearScale,\n  LineElement,\n  PointElement,\n  Title,\n  Tooltip,\n} from 'chart.js';\nimport chartTrendline from 'chartjs-plugin-trendline';\nimport React from 'react';\n\nimport { Line } from 'react-chartjs-2';\nimport BarChar from './components/chart/bar-char/BarChar';\nimport LineCustom from './components/chart/Line/LegendCustom';\n// import { htmlLegendPlugin } from './util/common-function';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n  Filler,\n  chartTrendline,\n  // htmlLegendPlugin,\n);\n\nexport const options = {\n  responsive: true,\n  plugins: {\n    // htmlLegend: {\n    //   containerID: 'legend-container',\n    // },\n    legend: {\n      // align: 'end',\n      // padding: {\n      //   bottom: 30,\n      // },\n      // labels: {\n      //   usePointStyle: true,\n      //   pointStyle: 'circle',\n      //   padding: 30,\n      //   boxHeight: 8,\n      //   pointStyleWidth: 10,\n      // },\n      display: false,\n    },\n    legendCallback: function (chart) {\n      // Return the HTML string here.\n      console.log(chart.data.datasets);\n      var text = [];\n      text.push('<ul class=\"' + chart.id + '-legend\">');\n      for (var i = 0; i < chart.data.datasets[0].data.length; i++) {\n        text.push(\n          '<li><span id=\"legend-' +\n            i +\n            '-item\" style=\"background-color:' +\n            chart.data.datasets[0].backgroundColor[i] +\n            '\"   onclick=\"updateDataset(event, ' +\n            \"'\" +\n            i +\n            \"'\" +\n            ')\">',\n        );\n        if (chart.data.labels[i]) {\n          text.push(chart.data.labels[i]);\n        }\n        text.push('</span></li>');\n      }\n      text.push('</ul>');\n      return text.join('');\n    },\n    title: {\n      display: true,\n      align: 'start',\n      text: 'Chart.js Line Chart',\n      font: {\n        size: 20,\n      },\n      padding: {\n        bottom: 50,\n      },\n    },\n    tooltip: {\n      enabled: false,\n      position: 'nearest',\n      // external: externalTooltipHandler,\n    },\n  },\n  // plugins: [htmlLegendPlugin],\n  scales: {\n    x: {\n      grid: {\n        drawBorder: false,\n        display: false,\n        drawTicks: false,\n      },\n      ticks: {\n        align: 'start',\n        maxTicksLimit: 4,\n      },\n      title: {\n        display: true,\n        text: 'Time',\n        font: {\n          size: 16,\n          weight: 'bold',\n        },\n      },\n    },\n    y: {\n      grid: {\n        borderDash: (context) => {\n          if (context.tick.value === 0) return [];\n          return [4, 4];\n        },\n        color: '#348632',\n        drawTicks: false,\n      },\n      ticks: {\n        crossAlign: 'center',\n        align: 'center',\n      },\n      title: {\n        display: true,\n        text: 'Time',\n        font: {\n          size: 16,\n          weight: 'bold',\n        },\n      },\n    },\n  },\n};\n\nconst labels = [\n  '09:07:30',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  '09:07:30',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n];\n\nexport const data = {\n  labels,\n  datasets: [\n    {\n      label: 'Dataset 1',\n      data: [17, 18, 153, 106, 10, 95, 17, 18, 153, 106, 10, 95, 10, 95],\n      borderColor: 'rgb(255, 99, 132)',\n      fill: true,\n      backgroundColor: 'rgba(255, 99, 132, 0.1)',\n      // trendlineLinear: {\n      //   colorMin: 'red',\n      //   lineStyle: 'dotted',\n      //   width: 1,\n      //   projection: true,\n      // },\n    },\n    {\n      label: 'Dataset 2',\n      data: [67, 80, 53, 10, 10, 50],\n      borderColor: 'rgb(53, 162, 235)',\n      backgroundColor: 'rgba(53, 162, 235, 0.5)',\n      fill: false,\n      // trendlineLinear: {\n      //   colorMax: 'green',\n      //   lineStyle: 'dotted',\n      //   width: 2,\n      //   projection: true,\n      // },\n    },\n  ],\n};\n\nconst App = () => {\n  return (\n    <div style={{ width: '1000px', height: '200px' }}>\n      {/* <Line id='ngoclias' options={options} data={data} /> */}\n      <LineCustom />\n      {/* <BarChar /> */}\n      {/* <AntdSelect /> */}\n    </div>\n  );\n};\n\nexport default App;\n","C:\\Users\\Le Anh Ngoc\\Desktop\\learning\\ChartJsDemo\\src\\components\\chart\\bar-char\\BarChar.js",[],"C:\\Users\\Le Anh Ngoc\\Desktop\\learning\\ChartJsDemo\\src\\util\\common-function.js",["34"],"const getOrCreateTooltip = (chart) => {\r\n  let tooltipEl = chart.canvas.parentNode.querySelector('div');\r\n\r\n  if (!tooltipEl) {\r\n    tooltipEl = document.createElement('div');\r\n    tooltipEl.style.background = 'rgba(0, 0, 0, 0.7)';\r\n    tooltipEl.style.borderRadius = '3px';\r\n    tooltipEl.style.color = 'white';\r\n    tooltipEl.style.opacity = 1;\r\n    tooltipEl.style.pointerEvents = 'none';\r\n    tooltipEl.style.position = 'absolute';\r\n    tooltipEl.style.transform = 'translate(-50%, 0)';\r\n    tooltipEl.style.transition = 'all .1s ease';\r\n\r\n    const table = document.createElement('table');\r\n    table.style.margin = '0px';\r\n\r\n    tooltipEl.appendChild(table);\r\n    chart.canvas.parentNode.appendChild(tooltipEl);\r\n  }\r\n\r\n  return tooltipEl;\r\n};\r\n\r\nexport const externalTooltipHandler = (context) => {\r\n  console.log(context);\r\n  // Tooltip Element\r\n  const { chart, tooltip } = context;\r\n  const tooltipEl = getOrCreateTooltip(chart);\r\n\r\n  // Hide if no tooltip\r\n  if (tooltip.opacity === 0) {\r\n    tooltipEl.style.opacity = 0;\r\n    return;\r\n  }\r\n\r\n  // Set Text\r\n  if (tooltip.body) {\r\n    const titleLines = tooltip.title || [];\r\n    const bodyLines = tooltip.body.map((b) => b.lines);\r\n\r\n    const tableHead = document.createElement('thead');\r\n\r\n    titleLines.forEach((title) => {\r\n      const tr = document.createElement('tr');\r\n      tr.style.borderWidth = 0;\r\n\r\n      const th = document.createElement('th');\r\n      th.style.borderWidth = 0;\r\n      const text = document.createTextNode(title);\r\n\r\n      th.appendChild(text);\r\n      tr.appendChild(th);\r\n      tableHead.appendChild(tr);\r\n    });\r\n\r\n    const tableBody = document.createElement('tbody');\r\n    bodyLines.forEach((body, i) => {\r\n      const colors = tooltip.labelColors[i];\r\n\r\n      const tr = document.createElement('tr');\r\n      tr.style.backgroundColor = 'inherit';\r\n      tr.style.borderWidth = 0;\r\n\r\n      const td = document.createElement('td');\r\n      td.style.borderWidth = 0;\r\n\r\n      const text = document.createTextNode(body);\r\n\r\n      td.appendChild(text);\r\n      tr.appendChild(td);\r\n      tableBody.appendChild(tr);\r\n    });\r\n\r\n    const tableRoot = tooltipEl.querySelector('table');\r\n\r\n    // Remove old children\r\n    while (tableRoot.firstChild) {\r\n      tableRoot.firstChild.remove();\r\n    }\r\n\r\n    // Add new children\r\n    tableRoot.appendChild(tableHead);\r\n    tableRoot.appendChild(tableBody);\r\n  }\r\n\r\n  const { offsetLeft: positionX, offsetTop: positionY } = chart.canvas;\r\n\r\n  // Display, position, and set styles for font\r\n  tooltipEl.style.opacity = 1;\r\n  if (tooltip.title[0] === 'April') tooltipEl.style.opacity = 0;\r\n  tooltipEl.style.left = positionX + tooltip.caretX + 'px';\r\n  tooltipEl.style.top = positionY + tooltip.caretY + 'px';\r\n  tooltipEl.style.font = tooltip.options.bodyFont.string;\r\n  tooltipEl.style.padding = tooltip.options.padding + 'px ' + tooltip.options.padding + 'px';\r\n  tooltipEl.style.fontSize = '12px';\r\n};\r\n\r\nconst getOrCreateLegendList = (chart, id) => {\r\n  const legendContainer = document.getElementById(id);\r\n  let listContainer = legendContainer.querySelector('ul');\r\n\r\n  if (!listContainer) {\r\n    listContainer = document.createElement('ul');\r\n    listContainer.style.display = 'flex';\r\n    listContainer.style.flexDirection = 'row';\r\n    listContainer.style.margin = 0;\r\n    listContainer.style.padding = 0;\r\n\r\n    legendContainer.appendChild(listContainer);\r\n  }\r\n\r\n  return listContainer;\r\n};\r\n\r\nexport const htmlLegendPlugin = {\r\n  id: 'htmlLegend',\r\n  afterUpdate(chart, args, options) {\r\n    // const items = chart.options.plugins.legend.labels.generateLabels(chart);\r\n    // const ul = document.createElement('ul');\r\n    // items.forEach((item) => {\r\n    //   const li = document.createElement('li');\r\n    //   const boxSpan = document.createElement('span');\r\n    //   boxSpan.style.background = item.fillStyle;\r\n    //   li.appendChild(boxSpan);\r\n    //   li.appendChild(document.createTextNode(item.text));\r\n    //   ul.appendChild(li);\r\n    // });\r\n    // const jsLegend = document.getElementById('js-legend');\r\n    // jsLegend.appendChild(ul);\r\n\r\n    const ul = getOrCreateLegendList(chart, options.containerID);\r\n\r\n    // Remove old legend items\r\n    while (ul.firstChild) {\r\n      ul.firstChild.remove();\r\n    }\r\n\r\n    // Reuse the built-in legendItems generator\r\n    const items = chart.options.plugins.legend.labels.generateLabels(chart);\r\n\r\n    items.forEach((item) => {\r\n      const li = document.createElement('li');\r\n      li.style.alignItems = 'center';\r\n      li.style.cursor = 'pointer';\r\n      li.style.display = 'flex';\r\n      li.style.flexDirection = 'row';\r\n      li.style.marginLeft = '10px';\r\n\r\n      li.onclick = () => {\r\n        const { type } = chart.config;\r\n        if (type === 'pie' || type === 'doughnut') {\r\n          // Pie and doughnut charts only have a single dataset and visibility is per item\r\n          chart.toggleDataVisibility(item.index);\r\n        } else {\r\n          chart.setDatasetVisibility(item.datasetIndex, !chart.isDatasetVisible(item.datasetIndex));\r\n        }\r\n        chart.update();\r\n      };\r\n\r\n      // Color box\r\n      const boxSpan = document.createElement('span');\r\n      boxSpan.style.background = '#000';\r\n      boxSpan.style.borderColor = item.strokeStyle;\r\n      boxSpan.style.borderWidth = item.lineWidth + 'px';\r\n      boxSpan.style.display = 'inline-block';\r\n      boxSpan.style.height = '20px';\r\n      boxSpan.style.marginRight = '10px';\r\n      boxSpan.style.width = '20px';\r\n\r\n      // Text\r\n      const textContainer = document.createElement('p');\r\n      textContainer.style.color = item.fontColor;\r\n      textContainer.style.margin = 0;\r\n      textContainer.style.padding = 0;\r\n      textContainer.style.textDecoration = item.hidden ? 'line-through' : '';\r\n\r\n      const text = document.createTextNode(item.text);\r\n      textContainer.appendChild(text);\r\n\r\n      li.appendChild(boxSpan);\r\n      li.appendChild(textContainer);\r\n      ul.appendChild(li);\r\n    });\r\n  },\r\n};\r\n","C:\\Users\\Le Anh Ngoc\\Desktop\\learning\\ChartJsDemo\\src\\components\\antdComps\\select.jsx",[],["35","36"],"C:\\Users\\Le Anh Ngoc\\Desktop\\learning\\ChartJsDemo\\src\\components\\chart\\Line\\LegendCustom.js",[],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":15,"column":10,"nodeType":"43","messageId":"44","endLine":15,"endColumn":14},{"ruleId":"41","severity":1,"message":"45","line":16,"column":8,"nodeType":"43","messageId":"44","endLine":16,"endColumn":15},{"ruleId":"41","severity":1,"message":"46","line":59,"column":13,"nodeType":"43","messageId":"44","endLine":59,"endColumn":19},{"ruleId":"37","replacedBy":"47"},{"ruleId":"39","replacedBy":"48"},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"no-unused-vars","'Line' is defined but never used.","Identifier","unusedVar","'BarChar' is defined but never used.","'colors' is assigned a value but never used.",["49"],["50"],"no-global-assign","no-unsafe-negation"]