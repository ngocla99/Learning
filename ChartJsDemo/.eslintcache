[{"C:\\Users\\Le Anh Ngoc\\Desktop\\learning\\ChartJsDemo\\src\\index.js":"1","C:\\Users\\Le Anh Ngoc\\Desktop\\learning\\ChartJsDemo\\src\\App.js":"2","C:\\Users\\Le Anh Ngoc\\Desktop\\learning\\ChartJsDemo\\src\\components\\chart\\bar-char\\BarChar.js":"3","C:\\Users\\Le Anh Ngoc\\Desktop\\learning\\ChartJsDemo\\src\\util\\common-function.js":"4","C:\\Users\\Le Anh Ngoc\\Desktop\\learning\\ChartJsDemo\\src\\components\\antdComps\\select.jsx":"5"},{"size":169,"mtime":1668993525128,"results":"6","hashOfConfig":"7"},{"size":3685,"mtime":1670290371333,"results":"8","hashOfConfig":"7"},{"size":3113,"mtime":1666110264116,"results":"9","hashOfConfig":"7"},{"size":5429,"mtime":1670289874190,"results":"10","hashOfConfig":"7"},{"size":248,"mtime":1668993776135,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"18dbbxi",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"C:\\Users\\Le Anh Ngoc\\Desktop\\learning\\ChartJsDemo\\src\\index.js",[],["24","25"],"C:\\Users\\Le Anh Ngoc\\Desktop\\learning\\ChartJsDemo\\src\\App.js",["26"],"C:\\Users\\Le Anh Ngoc\\Desktop\\learning\\ChartJsDemo\\src\\components\\chart\\bar-char\\BarChar.js",[],"C:\\Users\\Le Anh Ngoc\\Desktop\\learning\\ChartJsDemo\\src\\util\\common-function.js",["27"],"const getOrCreateTooltip = (chart) => {\r\n  let tooltipEl = chart.canvas.parentNode.querySelector('div');\r\n\r\n  if (!tooltipEl) {\r\n    tooltipEl = document.createElement('div');\r\n    tooltipEl.style.background = 'rgba(0, 0, 0, 0.7)';\r\n    tooltipEl.style.borderRadius = '3px';\r\n    tooltipEl.style.color = 'white';\r\n    tooltipEl.style.opacity = 1;\r\n    tooltipEl.style.pointerEvents = 'none';\r\n    tooltipEl.style.position = 'absolute';\r\n    tooltipEl.style.transform = 'translate(-50%, 0)';\r\n    tooltipEl.style.transition = 'all .1s ease';\r\n\r\n    const table = document.createElement('table');\r\n    table.style.margin = '0px';\r\n\r\n    tooltipEl.appendChild(table);\r\n    chart.canvas.parentNode.appendChild(tooltipEl);\r\n  }\r\n\r\n  return tooltipEl;\r\n};\r\n\r\nexport const externalTooltipHandler = (context) => {\r\n  console.log(context);\r\n  // Tooltip Element\r\n  const { chart, tooltip } = context;\r\n  const tooltipEl = getOrCreateTooltip(chart);\r\n\r\n  // Hide if no tooltip\r\n  if (tooltip.opacity === 0) {\r\n    tooltipEl.style.opacity = 0;\r\n    return;\r\n  }\r\n\r\n  // Set Text\r\n  if (tooltip.body) {\r\n    const titleLines = tooltip.title || [];\r\n    const bodyLines = tooltip.body.map((b) => b.lines);\r\n\r\n    const tableHead = document.createElement('thead');\r\n\r\n    titleLines.forEach((title) => {\r\n      const tr = document.createElement('tr');\r\n      tr.style.borderWidth = 0;\r\n\r\n      const th = document.createElement('th');\r\n      th.style.borderWidth = 0;\r\n      const text = document.createTextNode(title);\r\n\r\n      th.appendChild(text);\r\n      tr.appendChild(th);\r\n      tableHead.appendChild(tr);\r\n    });\r\n\r\n    const tableBody = document.createElement('tbody');\r\n    bodyLines.forEach((body, i) => {\r\n      const colors = tooltip.labelColors[i];\r\n\r\n      const tr = document.createElement('tr');\r\n      tr.style.backgroundColor = 'inherit';\r\n      tr.style.borderWidth = 0;\r\n\r\n      const td = document.createElement('td');\r\n      td.style.borderWidth = 0;\r\n\r\n      const text = document.createTextNode(body);\r\n\r\n      td.appendChild(text);\r\n      tr.appendChild(td);\r\n      tableBody.appendChild(tr);\r\n    });\r\n\r\n    const tableRoot = tooltipEl.querySelector('table');\r\n\r\n    // Remove old children\r\n    while (tableRoot.firstChild) {\r\n      tableRoot.firstChild.remove();\r\n    }\r\n\r\n    // Add new children\r\n    tableRoot.appendChild(tableHead);\r\n    tableRoot.appendChild(tableBody);\r\n  }\r\n\r\n  const { offsetLeft: positionX, offsetTop: positionY } = chart.canvas;\r\n\r\n  // Display, position, and set styles for font\r\n  tooltipEl.style.opacity = 1;\r\n  if (tooltip.title[0] === 'April') tooltipEl.style.opacity = 0;\r\n  tooltipEl.style.left = positionX + tooltip.caretX + 'px';\r\n  tooltipEl.style.top = positionY + tooltip.caretY + 'px';\r\n  tooltipEl.style.font = tooltip.options.bodyFont.string;\r\n  tooltipEl.style.padding = tooltip.options.padding + 'px ' + tooltip.options.padding + 'px';\r\n  tooltipEl.style.fontSize = '12px';\r\n};\r\n\r\nconst getOrCreateLegendList = (chart, id) => {\r\n  const legendContainer = document.getElementById(id);\r\n  let listContainer = legendContainer.querySelector('ul');\r\n\r\n  if (!listContainer) {\r\n    listContainer = document.createElement('ul');\r\n    listContainer.style.display = 'flex';\r\n    listContainer.style.flexDirection = 'row';\r\n    listContainer.style.margin = 0;\r\n    listContainer.style.padding = 0;\r\n\r\n    legendContainer.appendChild(listContainer);\r\n  }\r\n\r\n  return listContainer;\r\n};\r\n\r\nexport const htmlLegendPlugin = {\r\n  id: 'htmlLegend',\r\n  afterUpdate(chart, args, options) {\r\n    const ul = getOrCreateLegendList(chart, options.containerID);\r\n\r\n    // Remove old legend items\r\n    while (ul.firstChild) {\r\n      ul.firstChild.remove();\r\n    }\r\n\r\n    // Reuse the built-in legendItems generator\r\n    const items = chart.options.plugins.legend.labels.generateLabels(chart);\r\n\r\n    items.forEach((item) => {\r\n      const li = document.createElement('li');\r\n      li.style.alignItems = 'center';\r\n      li.style.cursor = 'pointer';\r\n      li.style.display = 'flex';\r\n      li.style.flexDirection = 'row';\r\n      li.style.marginLeft = '10px';\r\n\r\n      li.onclick = () => {\r\n        const { type } = chart.config;\r\n        if (type === 'pie' || type === 'doughnut') {\r\n          // Pie and doughnut charts only have a single dataset and visibility is per item\r\n          chart.toggleDataVisibility(item.index);\r\n        } else {\r\n          chart.setDatasetVisibility(item.datasetIndex, !chart.isDatasetVisible(item.datasetIndex));\r\n        }\r\n        chart.update();\r\n      };\r\n\r\n      // Color box\r\n      const boxSpan = document.createElement('span');\r\n      boxSpan.style.background = item.fillStyle;\r\n      boxSpan.style.borderColor = item.strokeStyle;\r\n      boxSpan.style.borderWidth = item.lineWidth + 'px';\r\n      boxSpan.style.display = 'inline-block';\r\n      boxSpan.style.height = '20px';\r\n      boxSpan.style.marginRight = '10px';\r\n      boxSpan.style.width = '20px';\r\n\r\n      // Text\r\n      const textContainer = document.createElement('p');\r\n      textContainer.style.color = item.fontColor;\r\n      textContainer.style.margin = 0;\r\n      textContainer.style.padding = 0;\r\n      textContainer.style.textDecoration = item.hidden ? 'line-through' : '';\r\n\r\n      const text = document.createTextNode(item.text);\r\n      textContainer.appendChild(text);\r\n\r\n      li.appendChild(boxSpan);\r\n      li.appendChild(textContainer);\r\n      ul.appendChild(li);\r\n    });\r\n  },\r\n};\r\n","C:\\Users\\Le Anh Ngoc\\Desktop\\learning\\ChartJsDemo\\src\\components\\antdComps\\select.jsx",[],{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":70,"column":3,"nodeType":"34","messageId":"35","endLine":70,"endColumn":10},{"ruleId":"36","severity":1,"message":"37","line":59,"column":13,"nodeType":"38","messageId":"39","endLine":59,"endColumn":19},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"no-dupe-keys","Duplicate key 'plugins'.","ObjectExpression","unexpected","no-unused-vars","'colors' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]